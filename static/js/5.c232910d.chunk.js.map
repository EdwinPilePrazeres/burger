{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ig","style","textTransform","display","margin","border","padding","className","classes","Order","Number","parseFloat","price","toFixed","connect","state","orders","loading","token","auth","userId","dispatch","onFetchOrders","actions","withErrorHandler","useEffect","Spinner","id","axios"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,oFCmCXC,EAhCD,SAAEC,GACZ,IAAMC,EAAc,GAEpB,IAAM,IAAIC,KAAkBF,EAAMC,YAC9BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAC,GACrC,OAAO,uBACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OANV,UAQYN,EAAGJ,KARf,KAQuBI,EAAGH,OAR1B,MAQEG,EAAGJ,SAGhB,OACI,sBAAKW,UAAWC,IAAQC,MAAxB,UACI,8CAAiBX,KACjB,wCAAU,0CAAaY,OAAOC,WAAYnB,EAAMoB,OAAQC,QAAS,a,+BCkB9DC,uBAfS,SAAAC,GACpB,MAAO,CACHC,OAAQD,EAAMxB,MAAMyB,OACpBC,QAASF,EAAMxB,MAAM0B,QACrBC,MAAOH,EAAMI,KAAKD,MAClBE,OAAQL,EAAMI,KAAKC,WAIA,SAAAC,GACvB,MAAO,CACHC,cAAe,SAACJ,EAAOE,GAAR,OAAmBC,EAAUE,IAAoBL,EAAOE,QAIhEN,CAAgDU,aAxChD,SAAAhC,GAAU,IAEd8B,EAAiB9B,EAAjB8B,cAEPG,qBAAU,WACNH,EAAc9B,EAAM0B,MAAO1B,EAAM4B,UAClC,CAACE,IAEJ,IAAIN,EAAS,cAACU,EAAA,EAAD,IASb,OARMlC,EAAMyB,UACRD,EAASxB,EAAMwB,OAAOjB,KAAK,SAAAR,GAAK,OAC5B,cAACkB,EAAD,CAEIhB,YAAaF,EAAME,YACnBmB,MAAOrB,EAAMqB,OAFRrB,EAAMoC,QAMnB,8BACKX,MAqB4EY","file":"static/js/5.c232910d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__waiMd\"};","import React from 'react';\r\n\r\nimport classes from './Order.module.css';\r\n\r\nconst order = ( props ) => {\r\n    const ingredients = [];\r\n\r\n    for ( let ingredientName in props.ingredients ) {\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName,\r\n                amount: props.ingredients[ingredientName]\r\n            }\r\n        );\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ig => {\r\n        return <span \r\n            style={{\r\n                textTransform: 'capitalize',\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding: '5px'\r\n                }}\r\n            key={ig.name}>{ig.name} ({ig.amount})</span>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredients: {ingredientOutput}</p>\r\n            <p>Price: <strong>USD {Number.parseFloat( props.price ).toFixed( 2 )}</strong></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default order;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nconst Orders = props => {\r\n\r\n    const {onFetchOrders} = props;\r\n\r\n    useEffect(() => {\r\n        onFetchOrders(props.token, props.userId);\r\n    }, [onFetchOrders])\r\n    \r\n    let orders = <Spinner />;\r\n    if ( !props.loading ) {\r\n        orders = props.orders.map( order => (\r\n            <Order\r\n                key={order.id}\r\n                ingredients={order.ingredients}\r\n                price={order.price} />\r\n        ) )\r\n    }\r\n    return (\r\n        <div>\r\n            {orders}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch( actions.fetchOrders(token, userId) )\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( withErrorHandler( Orders, axios ) );"],"sourceRoot":""}