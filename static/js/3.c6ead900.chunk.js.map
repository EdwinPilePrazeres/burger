{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","key","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.c6ead900.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input___B2OA\",\"Label\":\"Input_Label__hWnB8\",\"InputElement\":\"Input_InputElement__1yRbz\",\"Invalid\":\"Input_Invalid__3JcL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2zt30\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2bIVM\"};","import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nconst ContactData = props => {\r\n    const [orderForm, setOrderForm] = useState({\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        })\r\n        const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n    const orderHandler = ( event ) => {\r\n        event.preventDefault();\r\n  \r\n        const formData = {};\r\n        for (let formElementIdentifier in orderForm) {\r\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: props.ings,\r\n            price: props.price,\r\n            orderData: formData,\r\n            userId: props.userId\r\n        }\r\n\r\n        props.onOrderBurger(order, props.token);\r\n        \r\n    }\r\n\r\n    const inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n        \r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        setOrderForm(updatedOrderForm);\r\n        setFormIsValid(formIsValid);\r\n    }\r\n\r\n        const formElementsArray = [];\r\n        for (let key in orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if ( props.loading ) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nconst Checkout = props => {\r\n\r\n    const checkoutCancelledHandler = () => {\r\n        props.history.goBack();\r\n    }\r\n\r\n    const checkoutContinuedHandler = () => {\r\n        props.history.replace( '/checkout/contact-data' );\r\n    }\r\n\r\n \r\n        let summary = <Redirect to=\"/\" />\r\n        if ( props.ings ) {\r\n            const purchasedRedirect =props.purchased ? <Redirect to=\"/\"/> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={props.ings}\r\n                        checkoutCancelled={checkoutCancelledHandler}\r\n                        checkoutContinued={checkoutContinuedHandler} />\r\n                    <Route\r\n                        path={props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect( mapStateToProps )( Checkout );"],"sourceRoot":""}