{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthRedirectPath","useState","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignup","useEffect","formElementsArray","key","id","config","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"8IA0DeA,IAtDD,SAAEC,GACZ,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAM9B,OAJIJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC/CL,EAAaM,KAAKL,IAAQM,SAGrBT,EAAMU,aACX,IAAO,QACHT,EAAe,+CACXU,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,eAFC,IAGXC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WACpB,MACJ,IAAO,WACHf,EAAe,kDACXU,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,eAFC,IAGXC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WACpB,MACJ,IAAO,SACHf,EACI,wBACIU,UAAWT,EAAaU,KAAK,KAC7BE,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,QAHpB,SAIKhB,EAAMa,cAAcI,QAAQC,KAAI,SAAAC,GAAM,OACnC,wBAA2BL,MAAOK,EAAOL,MAAzC,SACKK,EAAOC,cADCD,EAAOL,YAMhC,MACJ,QACIb,EAAe,+CACXU,UAAWT,EAAaU,KAAK,MACzBZ,EAAMa,eAFC,IAGXC,MAAOd,EAAMc,MACbC,SAAUf,EAAMgB,WAG5B,OACI,sBAAKL,UAAWR,IAAQkB,MAAxB,UACI,uBAAOV,UAAWR,IAAQmB,MAA1B,SAAkCtB,EAAMuB,QACvCtB,O,oBCnDbuB,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,yB,oBCAjID,EAAOC,QAAU,CAAC,KAAO,qB,oJC4IVC,uBAjBS,SAAAC,GACpB,MAAO,CACHC,QAASD,EAAME,KAAKD,QACpBE,MAAOH,EAAME,KAAKC,MAClBC,gBAAsC,OAArBJ,EAAME,KAAKG,MAC5BC,eAAgBN,EAAMO,cAAcC,SACpCC,iBAAkBT,EAAME,KAAKO,qBAIV,SAAAC,GACvB,MAAO,CACHC,OAAQ,SAAEC,EAAOC,EAAUC,GAAnB,OAAiCJ,EAAUK,IAAcH,EAAOC,EAAUC,KAClFE,sBAAuB,kBAAMN,EAAUK,IAA6B,UAI7DhB,EAlIF,SAAA1B,GAAU,IAAD,EACc4C,mBAAS,CACjCL,MAAO,CACH7B,YAAa,QACbG,cAAe,CACXgC,KAAM,QACNC,YAAa,gBAEjBhC,MAAO,GACPiC,WAAY,CACRC,UAAU,EACVC,SAAS,GAEbC,OAAO,EACP3C,SAAS,GAEbiC,SAAU,CACN9B,YAAa,QACbG,cAAe,CACXgC,KAAM,WACNC,YAAa,YAEjBhC,MAAO,GACPiC,WAAY,CACRC,UAAU,EACVG,UAAW,GAEfD,OAAO,EACP3C,SAAS,KA5BH,mBACX6C,EADW,KACDC,EADC,OA+BkBT,oBAAS,GA/B3B,mBA+BPH,EA/BO,KA+BGa,EA/BH,KAkClBC,qBAAU,WACAvD,EAAMiC,gBAA6C,MAA3BjC,EAAMoC,kBAChCpC,EAAM2C,0BAEX,IAGH,IAoBMa,EAAoB,GAC1B,IAAM,IAAIC,KAAOL,EACbI,EAAkBhD,KAAM,CACpBkD,GAAID,EACJE,OAAQP,EAASK,KAIzB,IAAIG,EAAOJ,EAAkBtC,KAAK,SAAA2C,GAAW,OACzC,cAAC,IAAD,CAEInD,YAAamD,EAAYF,OAAOjD,YAChCG,cAAegD,EAAYF,OAAO9C,cAClCC,MAAO+C,EAAYF,OAAO7C,MAC1BT,SAAUwD,EAAYF,OAAOT,MAC7B5C,eAAgBuD,EAAYF,OAAOZ,WACnCxC,QAASsD,EAAYF,OAAOpD,QAC5BS,QAAS,SAAE8C,GAAF,OArCW,SAAEA,EAAOC,GACjC,IAAMC,EAAkBC,YAAcb,EAAF,eAC/BW,EAAcE,YAAcb,EAASW,GAAc,CAChDjD,MAAOgD,EAAMI,OAAOpD,MACpBoC,MAAOiB,YAAeL,EAAMI,OAAOpD,MAAOsC,EAASW,GAAahB,YAChExC,SAAS,MAGjB8C,EAAYW,GA6BcI,CAAqBN,EAAOD,EAAYH,MAPzDG,EAAYH,OAUpB1D,EAAM4B,UACPgC,EAAO,cAAC,IAAD,KAGX,IAAIS,EAAe,KAEdrE,EAAM8B,QACPuC,EACI,4BAAIrE,EAAM8B,MAAMwC,WAIxB,IAAIC,EAAe,KAKnB,OAJKvE,EAAM+B,kBACPwC,EAAe,cAAC,IAAD,CAAUC,GAAIxE,EAAMoC,oBAInC,sBAAKzB,UAAWR,IAAQsE,KAAxB,UACKF,EACAF,EACD,uBAAMK,SAlDQ,SAAEZ,GACpBA,EAAMa,iBACN3E,EAAMsC,OAAQc,EAASb,MAAMzB,MAAOsC,EAASZ,SAAS1B,MAAO2B,IAgDzD,UACKmB,EACD,cAAC,IAAD,CAAQgB,QAAQ,UAAhB,uBAEJ,eAAC,IAAD,CACIC,QAlDkB,WAC1BvB,GAAab,IAkDLmC,QAAQ,SAFZ,uBAEgCnC,EAAW,SAAW","file":"static/js/4.55fd37ff.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst input = ( props ) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input___B2OA\",\"Label\":\"Input_Label__hWnB8\",\"InputElement\":\"Input_InputElement__1yRbz\",\"Invalid\":\"Input_Invalid__3JcL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__t7yWU\"};","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nconst Auth = props => {\r\n    const [authForm, setAuthForm] = useState({\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        })\r\n        const [isSignup, setIsSignup] = useState(true);\r\n    \r\n\r\n    useEffect(() => {\r\n        if ( !props.buildingBurger && props.authRedirectPath !== '/' ) {\r\n            props.onSetAuthRedirectPath();\r\n        }\r\n    }, [])\r\n\r\n\r\n    const inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = updateObject( authForm, {\r\n            [controlName]: updateObject( authForm[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity( event.target.value, authForm[controlName].validation ),\r\n                touched: true\r\n            } )\r\n        } );\r\n        setAuthForm(updatedControls);\r\n    }\r\n\r\n    const submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        props.onAuth( authForm.email.value, authForm.password.value, isSignup );\r\n    }\r\n\r\n    const switchAuthModeHandler = () => {\r\n        setIsSignup(!isSignup);\r\n    }\r\n\r\n    const formElementsArray = [];\r\n    for ( let key in authForm ) {\r\n        formElementsArray.push( {\r\n            id: key,\r\n            config: authForm[key]\r\n        } );\r\n    }\r\n\r\n    let form = formElementsArray.map( formElement => (\r\n        <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={( event ) => inputChangedHandler( event, formElement.id )} />\r\n    ) );\r\n\r\n    if ( props.loading ) {\r\n        form = <Spinner />\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if ( props.error ) {\r\n        errorMessage = (\r\n            <p>{props.error.message}</p>\r\n        );\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if ( props.isAuthenticated ) {\r\n        authRedirect = <Redirect to={props.authRedirectPath} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Auth}>\r\n            {authRedirect}\r\n            {errorMessage}\r\n            <form onSubmit={submitHandler}>\r\n                {form}\r\n                <Button btnType=\"Success\">SUBMIT</Button>\r\n            </form>\r\n            <Button\r\n                clicked={switchAuthModeHandler}\r\n                btnType=\"Danger\">SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );"],"sourceRoot":""}